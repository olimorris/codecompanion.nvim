*codecompanion.txt*        For NVIM v0.10.0       Last change: 2025 January 23

==============================================================================
Table of Contents                            *codecompanion-table-of-contents*

  - Features                                          |codecompanion-features|
  - Documentation                                |codecompanion-documentation|
  - Troubleshooting                            |codecompanion-troubleshooting|

FEATURES                                              *codecompanion-features*

- Copilot Chat <https://github.com/features/copilot> meets Zed AI <https://zed.dev/blog/zed-ai>, in Neovim
- Support for Anthropic, Copilot, Gemini, Ollama, OpenAI, Azure OpenAI, HuggingFace and xAI LLMs (or bring your own!)
- Inline transformations, code creation and refactoring
- Variables, Slash Commands, Agents/Tools and Workflows to improve LLM output
- Built in prompt library for common tasks like advice on LSP errors and code explanations
- Create your own custom prompts, Variables and Slash Commands
- Have multiple chats open at the same time
- Async execution for fast performance


DOCUMENTATION                                    *codecompanion-documentation*

Please visit the documentation site <https://codecompanion.olimorris.dev> for
installation and configuration instructions.


TROUBLESHOOTING                                *codecompanion-troubleshooting*

Before raising an issue
<https://github.com/olimorris/codecompanion.nvim/issues>, there are a number of
steps you can take to troubleshoot a problem:

**Checkhealth**

Run `:checkhealth codecompanion` and check all dependencies are installed
correctly. Also take note of the log file path.

**Turn on logging**

Update your config and turn debug logging on:

>lua
    require("codecompanion").setup({
      opts = {
        log_level = "DEBUG", -- or "TRACE"
      }
    })
<

and inspect the log file as per the location from the checkhealth command.

**Try with a minimal.lua file**

A large proportion of issues which are raised in Neovim plugins are to do with
a user’s own config. That’s why I always ask users to fill in a
`minimal.lua` file when they raise an issue. We can rule out their config being
an issue and it allows me to recreate the problem.

For this purpose, I have included a minimal.lua
<https://github.com/olimorris/codecompanion.nvim/blob/main/minimal.lua> file in
the repository for you to test out if you’re facing issues. Simply copy the
file, edit it and run neovim with `nvim --clean -u minimal.lua`.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
