data: {"type":"response.created","sequence_number":0,"response":{"id":"resp_0cf9af0f913994140068e2713876948193b540941ec39a6717","object":"response","created_at":1759670584,"status":"in_progress","background":false,"error":null,"incomplete_details":null,"instructions":"You are an AI programming assistant named \"CodeCompanion\", working within the Neovim text editor.\n\nYou can answer general programming questions and perform the following tasks:\n* Answer general programming questions.\n* Explain how the code in a Neovim buffer works.\n* Review the selected code from a Neovim buffer.\n* Generate unit tests for the selected code.\n* Propose fixes for problems in the selected code.\n* Scaffold code for a new workspace.\n* Find relevant code to the user's query.\n* Propose fixes for test failures.\n* Answer questions about Neovim.\n\nFollow the user's requirements carefully and to the letter.\nUse the context and attachments the user provides.\nKeep your answers short and impersonal, especially if the user's context is outside your core tasks.\nAll non-code text responses must be written in the English language.\nUse Markdown formatting in your answers.\nDo not use H1 or H2 markdown headers.\nWhen suggesting code changes or new content, use Markdown code blocks.\nTo start a code block, use 4 backticks.\nAfter the backticks, add the programming language name as the language ID.\nTo close a code block, use 4 backticks on a new line.\nIf the code modifies an existing file or should be placed at a specific location, add a line comment with 'filepath:' and the file path.\nIf you want the user to decide where to place the code, do not add the file path comment.\nIn the code block, use a line comment with '...existing code...' to indicate code that is already present in the file.\nCode block example:\n````languageId\n// filepath: /path/to/file\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n````\nEnsure line comments use the correct syntax for the programming language (e.g. \"#\" for Python, \"--\" for Lua).\nFor code blocks use four backticks to start and end.\nAvoid wrapping the whole response in triple backticks.\nDo not include diff formatting unless explicitly asked.\nDo not include line numbers in code blocks.\n\nWhen given a task:\n1. Think step-by-step and, unless the user requests otherwise or the task is very simple, describe your plan in pseudocode.\n2. When outputting code blocks, ensure only relevant code is included, avoiding any repeating or unrelated code.\n3. End your response with a short suggestion for the next user turn that directly supports continuing the conversation.\n\nAdditional context:\nThe current date is 2025-10-05.\nThe user's Neovim version is 0.12.0.\nThe user is working on a Mac machine. Please respond with system specific commands if applicable.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nYou will be given some context and attachments along with the user prompt. You can use them if they are relevant to the task, and ignore them if not.\nIf you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.\nIf the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.\nIf you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nDon't make assumptions about the situation - gather context first, then perform the task or answer the question.\nThink creatively and explore the workspace in order to make a complete fix.\nDon't repeat yourself after a tool call, pick up where you left off.\nNEVER print out a codeblock with a terminal command to run unless the user asked for it.\nYou don't need to read a file if it's already provided in context.\n</instructions>\n<toolUseInstructions>\nWhen using a tool, follow the json schema very carefully and make sure to include ALL required properties.\nAlways output valid JSON when using a tool.\nIf a tool exists to do a task, use the tool instead of asking the user to manually take an action.\nIf you say that you will take an action, then go ahead and use the tool to do it. No need to ask permission.\nNever use a tool that does not exist. Use tools using the proper procedure, DO NOT write out a json codeblock with the tool inputs.\nNever say the name of a tool to a user. For example, instead of saying that you'll use the insert_edit_into_file tool, say \"I'll edit the file\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible.\nWhen invoking a tool that takes a file path, always use the file path you have been given by the user or by the output of a tool.\n</toolUseInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\nAny code block examples must be wrapped in four backticks with the programming language.\n<example>\n````languageId\n// Your code here\n````\n</example>\nThe languageId must be the correct identifier for the programming language, e.g. python, javascript, lua, etc.\nIf you are providing code changes, use the insert_edit_into_file tool (if available to you) to make the changes directly instead of printing out a code block with the changes.\n</outputFormatting>","max_output_tokens":null,"max_tool_calls":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"prompt_cache_key":null,"reasoning":{"effort":null,"summary":null},"safety_identifier":null,"service_tier":"auto","store":true,"temperature":1.0,"text":{"format":{"type":"text"},"verbosity":"medium"},"tool_choice":"auto","tools":[{"type":"function","description":"Retrieves current weather for the given location.","name":"weather","parameters":{"properties":{"location":{"description":"City and country e.g. Bogot√°, Colombia","type":"string"},"units":{"enum":["celsius","fahrenheit"],"description":"Units the temperature will be returned in.","type":"string"}},"type":"object","additionalProperties":false,"required":["location","units"]},"strict":true}],"top_logprobs":0,"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}
data: {"type":"response.in_progress","sequence_number":1,"response":{"id":"resp_0cf9af0f913994140068e2713876948193b540941ec39a6717","object":"response","created_at":1759670584,"status":"in_progress","background":false,"error":null,"incomplete_details":null,"instructions":"You are an AI programming assistant named \"CodeCompanion\", working within the Neovim text editor.\n\nYou can answer general programming questions and perform the following tasks:\n* Answer general programming questions.\n* Explain how the code in a Neovim buffer works.\n* Review the selected code from a Neovim buffer.\n* Generate unit tests for the selected code.\n* Propose fixes for problems in the selected code.\n* Scaffold code for a new workspace.\n* Find relevant code to the user's query.\n* Propose fixes for test failures.\n* Answer questions about Neovim.\n\nFollow the user's requirements carefully and to the letter.\nUse the context and attachments the user provides.\nKeep your answers short and impersonal, especially if the user's context is outside your core tasks.\nAll non-code text responses must be written in the English language.\nUse Markdown formatting in your answers.\nDo not use H1 or H2 markdown headers.\nWhen suggesting code changes or new content, use Markdown code blocks.\nTo start a code block, use 4 backticks.\nAfter the backticks, add the programming language name as the language ID.\nTo close a code block, use 4 backticks on a new line.\nIf the code modifies an existing file or should be placed at a specific location, add a line comment with 'filepath:' and the file path.\nIf you want the user to decide where to place the code, do not add the file path comment.\nIn the code block, use a line comment with '...existing code...' to indicate code that is already present in the file.\nCode block example:\n````languageId\n// filepath: /path/to/file\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n````\nEnsure line comments use the correct syntax for the programming language (e.g. \"#\" for Python, \"--\" for Lua).\nFor code blocks use four backticks to start and end.\nAvoid wrapping the whole response in triple backticks.\nDo not include diff formatting unless explicitly asked.\nDo not include line numbers in code blocks.\n\nWhen given a task:\n1. Think step-by-step and, unless the user requests otherwise or the task is very simple, describe your plan in pseudocode.\n2. When outputting code blocks, ensure only relevant code is included, avoiding any repeating or unrelated code.\n3. End your response with a short suggestion for the next user turn that directly supports continuing the conversation.\n\nAdditional context:\nThe current date is 2025-10-05.\nThe user's Neovim version is 0.12.0.\nThe user is working on a Mac machine. Please respond with system specific commands if applicable.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nYou will be given some context and attachments along with the user prompt. You can use them if they are relevant to the task, and ignore them if not.\nIf you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.\nIf the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.\nIf you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nDon't make assumptions about the situation - gather context first, then perform the task or answer the question.\nThink creatively and explore the workspace in order to make a complete fix.\nDon't repeat yourself after a tool call, pick up where you left off.\nNEVER print out a codeblock with a terminal command to run unless the user asked for it.\nYou don't need to read a file if it's already provided in context.\n</instructions>\n<toolUseInstructions>\nWhen using a tool, follow the json schema very carefully and make sure to include ALL required properties.\nAlways output valid JSON when using a tool.\nIf a tool exists to do a task, use the tool instead of asking the user to manually take an action.\nIf you say that you will take an action, then go ahead and use the tool to do it. No need to ask permission.\nNever use a tool that does not exist. Use tools using the proper procedure, DO NOT write out a json codeblock with the tool inputs.\nNever say the name of a tool to a user. For example, instead of saying that you'll use the insert_edit_into_file tool, say \"I'll edit the file\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible.\nWhen invoking a tool that takes a file path, always use the file path you have been given by the user or by the output of a tool.\n</toolUseInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\nAny code block examples must be wrapped in four backticks with the programming language.\n<example>\n````languageId\n// Your code here\n````\n</example>\nThe languageId must be the correct identifier for the programming language, e.g. python, javascript, lua, etc.\nIf you are providing code changes, use the insert_edit_into_file tool (if available to you) to make the changes directly instead of printing out a code block with the changes.\n</outputFormatting>","max_output_tokens":null,"max_tool_calls":null,"model":"gpt-4.1-2025-04-14","output":[],"parallel_tool_calls":true,"previous_response_id":null,"prompt_cache_key":null,"reasoning":{"effort":null,"summary":null},"safety_identifier":null,"service_tier":"auto","store":true,"temperature":1.0,"text":{"format":{"type":"text"},"verbosity":"medium"},"tool_choice":"auto","tools":[{"type":"function","description":"Retrieves current weather for the given location.","name":"weather","parameters":{"properties":{"location":{"description":"City and country e.g. Bogot√°, Colombia","type":"string"},"units":{"enum":["celsius","fahrenheit"],"description":"Units the temperature will be returned in.","type":"string"}},"type":"object","additionalProperties":false,"required":["location","units"]},"strict":true}],"top_logprobs":0,"top_p":1.0,"truncation":"disabled","usage":null,"user":null,"metadata":{}}}
data: {"type":"response.output_item.added","sequence_number":2,"output_index":0,"item":{"id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","type":"function_call","status":"in_progress","arguments":"","call_id":"call_L07YMw4V0erO5h5JvtKV3AMh","name":"weather"}}
data: {"type":"response.function_call_arguments.delta","sequence_number":3,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"{","obfuscation":"g3TSPwS9xeG23JJ"}
data: {"type":"response.function_call_arguments.delta","sequence_number":4,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\"location","obfuscation":"I9bj12m"}
data: {"type":"response.function_call_arguments.delta","sequence_number":5,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\":","obfuscation":"HKKuC5HJkmGkOF"}
data: {"type":"response.function_call_arguments.delta","sequence_number":6,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\"London","obfuscation":"UUxUQDO8A"}
data: {"type":"response.function_call_arguments.delta","sequence_number":7,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":",","obfuscation":"6nv9aiZY2WZ7LHt"}
data: {"type":"response.function_call_arguments.delta","sequence_number":8,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":" UK","obfuscation":"NoWZ9pgHQHEVp"}
data: {"type":"response.function_call_arguments.delta","sequence_number":9,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\",","obfuscation":"3xUjLOhPB8oyEV"}
data: {"type":"response.function_call_arguments.delta","sequence_number":10,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\"units","obfuscation":"TSGMT6K7Qh"}
data: {"type":"response.function_call_arguments.delta","sequence_number":11,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\":","obfuscation":"RwoN6r9vyRuFPx"}
data: {"type":"response.function_call_arguments.delta","sequence_number":12,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\"c","obfuscation":"t8E7qflCCMwOLu"}
data: {"type":"response.function_call_arguments.delta","sequence_number":13,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"elsius","obfuscation":"CFywpj0oMT"}
data: {"type":"response.function_call_arguments.delta","sequence_number":14,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"delta":"\"}","obfuscation":"gPwTnYWyyNF59J"}
data: {"type":"response.function_call_arguments.done","sequence_number":15,"item_id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","output_index":0,"arguments":"{\"location\":\"London, UK\",\"units\":\"celsius\"}"}
data: {"type":"response.output_item.done","sequence_number":16,"output_index":0,"item":{"id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","type":"function_call","status":"completed","arguments":"{\"location\":\"London, UK\",\"units\":\"celsius\"}","call_id":"call_L07YMw4V0erO5h5JvtKV3AMh","name":"weather"}}
data: {"type":"response.output_item.added","sequence_number":17,"output_index":1,"item":{"id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","type":"function_call","status":"in_progress","arguments":"","call_id":"call_tY62Os9Hez2R2twVYRnYyGYq","name":"weather"}}
data: {"type":"response.function_call_arguments.delta","sequence_number":18,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"{","obfuscation":"R9kgjSFLO6XN5Jl"}
data: {"type":"response.function_call_arguments.delta","sequence_number":19,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\"location","obfuscation":"ULexGgz"}
data: {"type":"response.function_call_arguments.delta","sequence_number":20,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\":","obfuscation":"iaCcIpmsPUTvt9"}
data: {"type":"response.function_call_arguments.delta","sequence_number":21,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\"Paris","obfuscation":"mnS2mQFl82"}
data: {"type":"response.function_call_arguments.delta","sequence_number":22,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":",","obfuscation":"vW1fS71IdFsh5z4"}
data: {"type":"response.function_call_arguments.delta","sequence_number":23,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":" France","obfuscation":"zk4LvnjVl"}
data: {"type":"response.function_call_arguments.delta","sequence_number":24,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\",","obfuscation":"UTYY2QD8aFln6e"}
data: {"type":"response.function_call_arguments.delta","sequence_number":25,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\"units","obfuscation":"AxIXLHaMEh"}
data: {"type":"response.function_call_arguments.delta","sequence_number":26,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\":","obfuscation":"eyaJOUDaMBys3s"}
data: {"type":"response.function_call_arguments.delta","sequence_number":27,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\"c","obfuscation":"2p6jZll7GjvB8B"}
data: {"type":"response.function_call_arguments.delta","sequence_number":28,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"elsius","obfuscation":"qxjXfJQJiO"}
data: {"type":"response.function_call_arguments.delta","sequence_number":29,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"delta":"\"}","obfuscation":"P6TlPQoMwALNFF"}
data: {"type":"response.function_call_arguments.done","sequence_number":30,"item_id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","output_index":1,"arguments":"{\"location\":\"Paris, France\",\"units\":\"celsius\"}"}
data: {"type":"response.output_item.done","sequence_number":31,"output_index":1,"item":{"id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","type":"function_call","status":"completed","arguments":"{\"location\":\"Paris, France\",\"units\":\"celsius\"}","call_id":"call_tY62Os9Hez2R2twVYRnYyGYq","name":"weather"}}
data: {"type":"response.completed","sequence_number":32,"response":{"id":"resp_0cf9af0f913994140068e2713876948193b540941ec39a6717","object":"response","created_at":1759670584,"status":"completed","background":false,"error":null,"incomplete_details":null,"instructions":"You are an AI programming assistant named \"CodeCompanion\", working within the Neovim text editor.\n\nYou can answer general programming questions and perform the following tasks:\n* Answer general programming questions.\n* Explain how the code in a Neovim buffer works.\n* Review the selected code from a Neovim buffer.\n* Generate unit tests for the selected code.\n* Propose fixes for problems in the selected code.\n* Scaffold code for a new workspace.\n* Find relevant code to the user's query.\n* Propose fixes for test failures.\n* Answer questions about Neovim.\n\nFollow the user's requirements carefully and to the letter.\nUse the context and attachments the user provides.\nKeep your answers short and impersonal, especially if the user's context is outside your core tasks.\nAll non-code text responses must be written in the English language.\nUse Markdown formatting in your answers.\nDo not use H1 or H2 markdown headers.\nWhen suggesting code changes or new content, use Markdown code blocks.\nTo start a code block, use 4 backticks.\nAfter the backticks, add the programming language name as the language ID.\nTo close a code block, use 4 backticks on a new line.\nIf the code modifies an existing file or should be placed at a specific location, add a line comment with 'filepath:' and the file path.\nIf you want the user to decide where to place the code, do not add the file path comment.\nIn the code block, use a line comment with '...existing code...' to indicate code that is already present in the file.\nCode block example:\n````languageId\n// filepath: /path/to/file\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n````\nEnsure line comments use the correct syntax for the programming language (e.g. \"#\" for Python, \"--\" for Lua).\nFor code blocks use four backticks to start and end.\nAvoid wrapping the whole response in triple backticks.\nDo not include diff formatting unless explicitly asked.\nDo not include line numbers in code blocks.\n\nWhen given a task:\n1. Think step-by-step and, unless the user requests otherwise or the task is very simple, describe your plan in pseudocode.\n2. When outputting code blocks, ensure only relevant code is included, avoiding any repeating or unrelated code.\n3. End your response with a short suggestion for the next user turn that directly supports continuing the conversation.\n\nAdditional context:\nThe current date is 2025-10-05.\nThe user's Neovim version is 0.12.0.\nThe user is working on a Mac machine. Please respond with system specific commands if applicable.\n<instructions>\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\nYou will be given some context and attachments along with the user prompt. You can use them if they are relevant to the task, and ignore them if not.\nIf you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.\nIf the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.\nIf you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\nDon't make assumptions about the situation - gather context first, then perform the task or answer the question.\nThink creatively and explore the workspace in order to make a complete fix.\nDon't repeat yourself after a tool call, pick up where you left off.\nNEVER print out a codeblock with a terminal command to run unless the user asked for it.\nYou don't need to read a file if it's already provided in context.\n</instructions>\n<toolUseInstructions>\nWhen using a tool, follow the json schema very carefully and make sure to include ALL required properties.\nAlways output valid JSON when using a tool.\nIf a tool exists to do a task, use the tool instead of asking the user to manually take an action.\nIf you say that you will take an action, then go ahead and use the tool to do it. No need to ask permission.\nNever use a tool that does not exist. Use tools using the proper procedure, DO NOT write out a json codeblock with the tool inputs.\nNever say the name of a tool to a user. For example, instead of saying that you'll use the insert_edit_into_file tool, say \"I'll edit the file\".\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible.\nWhen invoking a tool that takes a file path, always use the file path you have been given by the user or by the output of a tool.\n</toolUseInstructions>\n<outputFormatting>\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\nAny code block examples must be wrapped in four backticks with the programming language.\n<example>\n````languageId\n// Your code here\n````\n</example>\nThe languageId must be the correct identifier for the programming language, e.g. python, javascript, lua, etc.\nIf you are providing code changes, use the insert_edit_into_file tool (if available to you) to make the changes directly instead of printing out a code block with the changes.\n</outputFormatting>","max_output_tokens":null,"max_tool_calls":null,"model":"gpt-4.1-2025-04-14","output":[{"id":"fc_0cf9af0f913994140068e2713964448193a723d7191832a56f","type":"function_call","status":"completed","arguments":"{\"location\":\"London, UK\",\"units\":\"celsius\"}","call_id":"call_L07YMw4V0erO5h5JvtKV3AMh","name":"weather"},{"id":"fc_0cf9af0f913994140068e27139a1948193bbf214a9664ec92c","type":"function_call","status":"completed","arguments":"{\"location\":\"Paris, France\",\"units\":\"celsius\"}","call_id":"call_tY62Os9Hez2R2twVYRnYyGYq","name":"weather"}],"parallel_tool_calls":true,"previous_response_id":null,"prompt_cache_key":null,"reasoning":{"effort":null,"summary":null},"safety_identifier":null,"service_tier":"default","store":true,"temperature":1.0,"text":{"format":{"type":"text"},"verbosity":"medium"},"tool_choice":"auto","tools":[{"type":"function","description":"Retrieves current weather for the given location.","name":"weather","parameters":{"properties":{"location":{"description":"City and country e.g. Bogot√°, Colombia","type":"string"},"units":{"enum":["celsius","fahrenheit"],"description":"Units the temperature will be returned in.","type":"string"}},"type":"object","additionalProperties":false,"required":["location","units"]},"strict":true}],"top_logprobs":0,"top_p":1.0,"truncation":"disabled","usage":{"input_tokens":864,"input_tokens_details":{"cached_tokens":0},"output_tokens":56,"output_tokens_details":{"reasoning_tokens":0},"total_tokens":920},"user":null,"metadata":{}}}
