{
  "name": "CodeCompanion.nvim",
  "version": "1.0.0",
  "workspace_spec": "1.0",
  "description": "CodeCompanion.nvim is an AI-powered productivity tool integrated into Neovim, designed to enhance the development workflow by seamlessly interacting with various large language models (LLMs). It offers features like inline code transformations, code creation, refactoring, and supports multiple LLMs such as OpenAI, Anthropic, and Google Gemini, among others. With tools for variable management, agents, and custom workflows, CodeCompanion.nvim streamlines coding tasks and facilitates intelligent code assistance directly within the Neovim editor",
  "groups": [
    {
      "name": "Chat Buffer",
      "description": "${workspace_description}. I've grouped a number of files together into a group I'm calling \"${group_name}\". The chat buffer is a Neovim buffer which allows a user to interact with an LLM. The buffer is formatted as Markdown with a user's content residing under a H2 header. The user types their message, saves the buffer and the plugin then uses Tree-sitter to parse the buffer, extracting the contents and sending to an adapter which connects to the user's chosen LLM. The response back from the LLM is streamed into the buffer under another H2 header. The user is then free to respond back to the LLM.\n\nBelow are the relevant files which we will be discussing:\n\n${hierarchy}",
      "vars": {
        "base_dir": "lua/codecompanion/strategies/chat"
      },
      "files": [
        {
          "description": "The `${filename}` file is the entry point for the chat strategy. All methods directly relating to the chat buffer reside here.",
          "path": "${base_dir}/init.lua"
        }
      ],
      "symbols": [
        {
          "description": "References are files, buffers, symbols or URLs that are shared with an LLM to provide additional context. The `${filename}` is where this logic sits and I've shared its symbolic outline below.",
          "path": "${base_dir}/references.lua"
        },
        {
          "description": "A watcher is when a user has toggled a specific buffer to be watched. When a message is sent to the LLM by the user, any changes made to the watched buffer are also sent, giving the LLM up to date context. The `${filename}` is where this logic sits and I've shared its symbolic outline below.",
          "path": "${base_dir}/watchers.lua"
        }
      ]
    },
    {
      "name": "Test",
      "description": "This is a test group",
      "vars": {
        "base_dir": "tests/stubs"
      },
      "files": [
        {
          "description": "Test description for the file ${filename} located at ${path}",
          "path": "${base_dir}/stub.go"
        },
        "${base_dir}/stub.txt"
      ],
      "symbols": [
        {
          "description": "Test symbol description for the file ${filename} located at ${path}",
          "path": "${base_dir}/stub.lua"
        },
        "${base_dir}/stub.py"
      ]
    }
  ]
}
