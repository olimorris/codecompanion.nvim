name: Bug Report
description: Raising a bug/issue with the plugin
title: "[Bug]: "
labels: ["bug"]

body:
    - type: markdown
      attributes:
        value: |
          **Before** reporting an issue, make sure to read the [documentation](https://codecompanion.olimorris.dev) and search [existing issues](https://github.com/olimorris/codecompanion.nvim/issues).

          **What is a bug?**
          - A bug is a reproducible error that causes CodeCompanion to behave incorrectly, crash, or not work as documented.
          - Minor cosmetic issues (such as extra line breaks or minor formatting quirks) are not considered bugs unless they impact usability or readability.
          - Feature requests, usage questions, or configuration help should go to [Discussions](https://github.com/olimorris/codecompanion.nvim/discussions).

          If you don't supply a valid `init.lua` file at the bottom of this page, your issue will be closed.

          _Issues that do not follow this template, or are out of scope, may be closed without comment._

    - type: checkboxes
      attributes:
        label: Pre-submission checklist
        description: Please confirm all of the following before submitting.
        options:
          - label: I have read the documentation.
            required: true
          - label: I have updated CodeCompanion.nvim and all dependencies to the latest version.
            required: true
          - label: I have searched for existing issues and discussions.
            required: true
          - label: I have checked related plugin issue trackers if relevant.
            required: true
          - label: My issue is not a minor or cosmetic quirk (e.g., formatting, spacing, or other non-functional details).
            required: true

    - type: input
      attributes:
        label: "Neovim version (nvim -v)"
        placeholder: "0.8.0 commit db1b0ee3b30f"
      validations:
        required: true

    - type: input
      attributes:
        label: "Operating system/version"
        placeholder: "macOS 14.4, Ubuntu 22.04, Windows 11"
      validations:
        required: true

    - type: input
      attributes:
        label: "Adapter and model"
        placeholder: "Copilot and GPT-4.1"
      validations:
        required: true

    - type: textarea
      attributes:
        label: Describe the bug
        description: |
          A clear and concise description of the problem.
          Include any error messages or unexpected behavior you observe.
        placeholder: |
          When I ...
          I expected ...
          Instead ...
      validations:
        required: true

    - type: textarea
      attributes:
        label: Steps to reproduce
        description: |
          List the steps to reproduce the issue.
          Be as minimal and precise as possible.
        placeholder: |
          1. Open Neovim with the provided init.lua
          2. ...
          3. ...
      validations:
        required: true

    - type: textarea
      attributes:
        label: Expected behavior
        description: What did you expect to happen?
        placeholder: |
          I expected ...
      validations:
        required: true

    - type: textarea
      attributes:
        label: Screenshots or recordings (optional)
        description: If applicable, add screenshots or a screen recording to help explain your problem.
      validations:
        required: false

    - type: markdown
      attributes:
        value: |
          ## Minimal Reproduction

          Please provide a minimal `init.lua` file that reproduces the issue.
          Save as `init.lua` and run with `nvim -u init.lua`.
          A minimal config will be created for you in your working directory under `.repro`.

    - type: textarea
      attributes:
        label: init.lua file
        description: |
          Paste your minimal `init.lua` here.
          Issues without a working minimal config will be closed.
        value: |
          --[[
          NOTE: Set the config path to enable the copilot adapter to work.
          It will search the following paths for a token:
            - "$CODECOMPANION_TOKEN_PATH/github-copilot/hosts.json"
            - "$CODECOMPANION_TOKEN_PATH/github-copilot/apps.json"
          --]]
          vim.env["CODECOMPANION_TOKEN_PATH"] = vim.fn.expand("~/.config")

          vim.env.LAZY_STDPATH = ".repro"
          load(vim.fn.system("curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua"))()

          -- Your CodeCompanion setup
          local plugins = {
            {
              "olimorris/codecompanion.nvim",
              dependencies = {
                { "nvim-treesitter/nvim-treesitter", build = ":TSUpdate" },
                { "nvim-lua/plenary.nvim" },
                -- Test with blink.cmp (delete if not required)
                {
                  "saghen/blink.cmp",
                  lazy = false,
                  version = "*",
                  opts = {
                    keymap = {
                      preset = "enter",
                      ["<S-Tab>"] = { "select_prev", "fallback" },
                      ["<Tab>"] = { "select_next", "fallback" },
                    },
                    cmdline = { sources = { "cmdline" } },
                    sources = {
                      default = { "lsp", "path", "buffer", "codecompanion" },
                    },
                  },
                },
                -- Test with nvim-cmp
                -- { "hrsh7th/nvim-cmp" },
              },
              opts = {
                --Refer to: https://github.com/olimorris/codecompanion.nvim/blob/main/lua/codecompanion/config.lua
                strategies = {
                  --NOTE: Change the adapter as required
                  chat = { adapter = "copilot" },
                  inline = { adapter = "copilot" },
                },
                opts = {
                  log_level = "DEBUG",
                },
              },
            },
          }

          -- Leaving this comment in to see if the issue author notices ;-)
          -- This is so I can tell if they've really tested with their own repro.lua file

          require("lazy.minit").repro({ spec = plugins })

          -- Setup Tree-sitter
          local ts_status, treesitter = pcall(require, "nvim-treesitter.configs")
          if ts_status then
            treesitter.setup({
              ensure_installed = { "lua", "markdown", "markdown_inline", "yaml", "diff" },
              highlight = { enable = true },
            })
          end

          -- Setup nvim-cmp
          -- local cmp_status, cmp = pcall(require, "cmp")
          -- if cmp_status then
          --   cmp.setup({
          --     mapping = cmp.mapping.preset.insert({
          --       ["<C-b>"] = cmp.mapping.scroll_docs(-4),
          --       ["<C-f>"] = cmp.mapping.scroll_docs(4),
          --       ["<C-Space>"] = cmp.mapping.complete(),
          --       ["<C-e>"] = cmp.mapping.abort(),
          --       ["<CR>"] = cmp.mapping.confirm({ select = true }),
          --       -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
          --     }),
          --   })
          -- end
        render: lua
      validations:
        required: true

    - type: textarea
      attributes:
        label: Log output (optional)
        description: |
          Share the output from `.repro/state/nvim/codecompanion.log` if available.
          Please redact any sensitive information.
      validations:
        required: false

    - type: checkboxes
      attributes:
        label: Minimal reproduction confirmation
        description: I have provided and tested with a minimal `init.lua` file as described above.
        options:
          - label: Yes, I have tested and provided a minimal `init.lua` file that reproduces the issue.
            required: true

